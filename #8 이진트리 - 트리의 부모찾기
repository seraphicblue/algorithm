#가장 마지막 노드까지 탐색한다음 부모로 거슬러 올라가면서 계산하기
from collections import deque, defaultdict

node = int(input())  # 노드의 수
lst = defaultdict(list)  # 서로의 관계를 양방향으로 정리할 리스트

for _ in range(node-1): #연결 갯수
     n1, n2 = map(int, input().split())#연결된 노드
     lst[n1].append(n2)
     lst[n2].append(n1)
    #이중으로 검사하고 부모가 있는 경우: 바로 밑 노드로 등록
    #               아닌 경우: 제일 위에 노드로 등록
    #그냥 lst를 돌리면서 찾는 것이 아니라-> 부모를 [0]으로 등록해놓고
    #데큐에 담은 후 끝에 있는 것을 뺀다
    #방문:부모과  비방문:자식으로 나눈다
deq = deque([1])
parent = [0] * (node + 1)
    while deq:
        n=deq.pop()
        for child in lst[n]:
            if parent[child]!=0: #방문한적이 있다면
                continue
            parent[child] = n #방문한 적이 있다면
            deq.append(child)

    print(*parent[2:], sep='\n')
