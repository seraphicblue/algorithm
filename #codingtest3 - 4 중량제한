from collections import deque

n, m = map(int, input().split())  # 섬의 개수, 다리 정보 수
brid = [[] for _ in range(n+1)]

for i in range(m):
    a, b, c = map(int, input().split())
    brid[a].append([b, c])  # 중량과 함께 연결된 섬 크로쓰로 추가
    brid[b].append([a, c])

first, second = map(int, input().split())  # 공장이 위치한 섬의 번호

def bfs(now):
    q = deque()
    q.append(first)
    visited = [False] * (n+1) #false로 초기화
    visited[first] = True

    while q:#q를 빼고 연결된 섬만 큼 반복해준다
        x = q.popleft()

        for idx, weight in brid[x]: #인덱스와 웨이트를 뽑아
            if not visited[idx] and weight >= now: #방문x 중량이 지금보다 많이나가면
                visited[idx] = True
                q.append(idx)#  큐에 추가

    return visited[second]#now로 최종 목적지 도달

start = 1
end = 1000000000
answer = 0

while start <= end:
    mid = (start + end) // 2

    if bfs(mid):
        answer = mid
        start = mid + 1 # start는 중량 늘리기 end는 중량 줄이기 이분탐색
    else:
        end = mid - 1

print(answer)
